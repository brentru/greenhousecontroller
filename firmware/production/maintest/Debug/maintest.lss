
maintest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000011d2  00001266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800162  00800162  000012c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f46  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ee  00000000  00000000  0000445e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b5  00000000  00000000  00004c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00005f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fe  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011a6  00000000  00000000  00006796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ed       	ldi	r30, 0xD2	; 210
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 36       	cpi	r26, 0x62	; 98
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e6       	ldi	r26, 0x62	; 98
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3a       	cpi	r26, 0xA5	; 165
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 16 07 	call	0xe2c	; 0xe2c <main>
      9e:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <analogSoilRead>:
 #include "alldecs.h"

//	Vegetronix
int analogSoilRead()
{
	ADCSRA = 0x87;
      a6:	ea e7       	ldi	r30, 0x7A	; 122
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	87 e8       	ldi	r24, 0x87	; 135
      ac:	80 83       	st	Z, r24
	ADMUX = 0x42;
      ae:	82 e4       	ldi	r24, 0x42	; 66
      b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
      b4:	80 81       	ld	r24, Z
      b6:	80 64       	ori	r24, 0x40	; 64
      b8:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);
      ba:	80 81       	ld	r24, Z
      bc:	84 ff       	sbrs	r24, 4
      be:	fd cf       	rjmp	.-6      	; 0xba <analogSoilRead+0x14>
	theLowEight = ADCL;
      c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      c4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <theLowEight>
	tenBitResult = ADCH<<8 | theLowEight;
      c8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	92 2b       	or	r25, r18
      d0:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <tenBitResult+0x1>
      d4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <tenBitResult>
	return tenBitResult;
}
      d8:	08 95       	ret

000000da <analogWaterRead>:

//	bouyancy 
int analogWaterRead()
{
	ADCSRA = 0x87;
      da:	ea e7       	ldi	r30, 0x7A	; 122
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	87 e8       	ldi	r24, 0x87	; 135
      e0:	80 83       	st	Z, r24
	ADMUX = 0x43;
      e2:	83 e4       	ldi	r24, 0x43	; 67
      e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
      e8:	80 81       	ld	r24, Z
      ea:	80 64       	ori	r24, 0x40	; 64
      ec:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);
      ee:	80 81       	ld	r24, Z
      f0:	84 ff       	sbrs	r24, 4
      f2:	fd cf       	rjmp	.-6      	; 0xee <analogWaterRead+0x14>
	theLowEight = ADCL;
      f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      f8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <theLowEight>
	tenBitResult = ADCH<<8 | theLowEight;
      fc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	92 2b       	or	r25, r18
     104:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <tenBitResult+0x1>
     108:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <tenBitResult>
	return tenBitResult;
}
     10c:	08 95       	ret

0000010e <analogPhoto1Read>:

int analogPhoto1Read()
{
	ADCSRA = 0x87;
     10e:	ea e7       	ldi	r30, 0x7A	; 122
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	87 e8       	ldi	r24, 0x87	; 135
     114:	80 83       	st	Z, r24
	ADMUX = 0x40;
     116:	80 e4       	ldi	r24, 0x40	; 64
     118:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
     11c:	80 81       	ld	r24, Z
     11e:	80 64       	ori	r24, 0x40	; 64
     120:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);
     122:	80 81       	ld	r24, Z
     124:	84 ff       	sbrs	r24, 4
     126:	fd cf       	rjmp	.-6      	; 0x122 <analogPhoto1Read+0x14>
	theLowEight = ADCL;
     128:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     12c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <theLowEight>
	tenBitResult = ADCH<<8 | theLowEight;
     130:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	92 2b       	or	r25, r18
     138:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <tenBitResult+0x1>
     13c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <tenBitResult>
	return tenBitResult;
}
     140:	08 95       	ret

00000142 <analogPhoto2Read>:

int analogPhoto2Read()
{
	ADCSRA = _BV(ADEN) | (0b111<<ADPS0);//0x87;
     142:	ea e7       	ldi	r30, 0x7A	; 122
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	87 e8       	ldi	r24, 0x87	; 135
     148:	80 83       	st	Z, r24
	ADMUX = 0x41;
     14a:	81 e4       	ldi	r24, 0x41	; 65
     14c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
     150:	80 81       	ld	r24, Z
     152:	80 64       	ori	r24, 0x40	; 64
     154:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);
     156:	80 81       	ld	r24, Z
     158:	84 ff       	sbrs	r24, 4
     15a:	fd cf       	rjmp	.-6      	; 0x156 <analogPhoto2Read+0x14>
	theLowEight = ADCL;
     15c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     160:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <theLowEight>
	tenBitResult = ADCH<<8 | theLowEight;
     164:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	92 2b       	or	r25, r18
     16c:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <tenBitResult+0x1>
     170:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <tenBitResult>
	return tenBitResult;
}
     174:	08 95       	ret

00000176 <dht_getdata>:

/*
 * get data from sensor
 */
#if DHT_FLOAT == 1
int8_t dht_getdata(float *temperature, float *humidity) {
     176:	6f 92       	push	r6
     178:	7f 92       	push	r7
     17a:	8f 92       	push	r8
     17c:	9f 92       	push	r9
     17e:	bf 92       	push	r11
     180:	cf 92       	push	r12
     182:	df 92       	push	r13
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	00 d0       	rcall	.+0      	; 0x192 <dht_getdata+0x1c>
     192:	00 d0       	rcall	.+0      	; 0x194 <dht_getdata+0x1e>
     194:	1f 92       	push	r1
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	4c 01       	movw	r8, r24
     19c:	3b 01       	movw	r6, r22
int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
#endif
	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     19e:	fe 01       	movw	r30, r28
     1a0:	31 96       	adiw	r30, 0x01	; 1
     1a2:	85 e0       	ldi	r24, 0x05	; 5
     1a4:	df 01       	movw	r26, r30
     1a6:	1d 92       	st	X+, r1
     1a8:	8a 95       	dec	r24
     1aa:	e9 f7       	brne	.-6      	; 0x1a6 <dht_getdata+0x30>

	//reset port
	DHT_DDR |= (1<<DHT_INPUTPIN); //output
     1ac:	52 9a       	sbi	0x0a, 2	; 10
	DHT_PORT |= (1<<DHT_INPUTPIN); //high
     1ae:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b0:	bf ef       	ldi	r27, 0xFF	; 255
     1b2:	e1 ee       	ldi	r30, 0xE1	; 225
     1b4:	f4 e0       	ldi	r31, 0x04	; 4
     1b6:	b1 50       	subi	r27, 0x01	; 1
     1b8:	e0 40       	sbci	r30, 0x00	; 0
     1ba:	f0 40       	sbci	r31, 0x00	; 0
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <dht_getdata+0x40>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <dht_getdata+0x4a>
     1c0:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<DHT_INPUTPIN); //low
     1c2:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c4:	8f ec       	ldi	r24, 0xCF	; 207
     1c6:	97 e0       	ldi	r25, 0x07	; 7
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <dht_getdata+0x52>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <dht_getdata+0x58>
     1ce:	00 00       	nop
	_delay_us(500);
	DHT_PORT |= (1<<DHT_INPUTPIN); //high
     1d0:	5a 9a       	sbi	0x0b, 2	; 11
	DHT_DDR &= ~(1<<DHT_INPUTPIN); //input
     1d2:	52 98       	cbi	0x0a, 2	; 10
     1d4:	95 ed       	ldi	r25, 0xD5	; 213
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <dht_getdata+0x60>
     1da:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<DHT_INPUTPIN))) {
     1dc:	4a 99       	sbic	0x09, 2	; 9
     1de:	9e c0       	rjmp	.+316    	; 0x31c <dht_getdata+0x1a6>
     1e0:	af e3       	ldi	r26, 0x3F	; 63
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	11 97       	sbiw	r26, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <dht_getdata+0x6e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <dht_getdata+0x74>
     1ea:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
     1ec:	4a 9b       	sbis	0x09, 2	; 9
     1ee:	98 c0       	rjmp	.+304    	; 0x320 <dht_getdata+0x1aa>
     1f0:	ef e3       	ldi	r30, 0x3F	; 63
     1f2:	f1 e0       	ldi	r31, 0x01	; 1
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <dht_getdata+0x7e>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <dht_getdata+0x84>
     1fa:	00 00       	nop
     1fc:	8e 01       	movw	r16, r28
     1fe:	0f 5f       	subi	r16, 0xFF	; 255
     200:	1f 4f       	sbci	r17, 0xFF	; 255
     202:	6e 01       	movw	r12, r28
     204:	f6 e0       	ldi	r31, 0x06	; 6
     206:	cf 0e       	add	r12, r31
     208:	d1 1c       	adc	r13, r1

/*
 * get data from sensor
 */
#if DHT_FLOAT == 1
int8_t dht_getdata(float *temperature, float *humidity) {
     20a:	0f 2e       	mov	r0, r31
     20c:	f7 e0       	ldi	r31, 0x07	; 7
     20e:	ff 2e       	mov	r15, r31
     210:	f0 2d       	mov	r31, r0
     212:	b1 2c       	mov	r11, r1
     214:	60 e0       	ldi	r22, 0x00	; 0
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<DHT_INPUTPIN)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
     216:	e1 e0       	ldi	r30, 0x01	; 1
     218:	f0 e0       	ldi	r31, 0x00	; 0

/*
 * get data from sensor
 */
#if DHT_FLOAT == 1
int8_t dht_getdata(float *temperature, float *humidity) {
     21a:	79 ec       	ldi	r23, 0xC9	; 201
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	27 c0       	rjmp	.+78     	; 0x26e <dht_getdata+0xf8>
     220:	21 50       	subi	r18, 0x01	; 1
     222:	31 09       	sbc	r19, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     224:	19 f4       	brne	.+6      	; 0x22c <dht_getdata+0xb6>
     226:	7e c0       	rjmp	.+252    	; 0x324 <dht_getdata+0x1ae>

/*
 * get data from sensor
 */
#if DHT_FLOAT == 1
int8_t dht_getdata(float *temperature, float *humidity) {
     228:	27 2f       	mov	r18, r23
     22a:	39 2f       	mov	r19, r25
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
     22c:	4a 9b       	sbis	0x09, 2	; 9
     22e:	f8 cf       	rjmp	.-16     	; 0x220 <dht_getdata+0xaa>
     230:	20 ea       	ldi	r18, 0xA0	; 160
     232:	2a 95       	dec	r18
     234:	f1 f7       	brne	.-4      	; 0x232 <dht_getdata+0xbc>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<DHT_INPUTPIN)) //if input is high after 30 us, get result
     236:	4a 9b       	sbis	0x09, 2	; 9
     238:	08 c0       	rjmp	.+16     	; 0x24a <dht_getdata+0xd4>
				result |= (1<<(7-i));
     23a:	9f 01       	movw	r18, r30
     23c:	04 2e       	mov	r0, r20
     23e:	02 c0       	rjmp	.+4      	; 0x244 <dht_getdata+0xce>
     240:	22 0f       	add	r18, r18
     242:	33 1f       	adc	r19, r19
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <dht_getdata+0xca>
     248:	82 2b       	or	r24, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<DHT_INPUTPIN)) { //wait until input get low (non blocking)
     24a:	27 2f       	mov	r18, r23
     24c:	39 2f       	mov	r19, r25
     24e:	04 c0       	rjmp	.+8      	; 0x258 <dht_getdata+0xe2>
     250:	21 50       	subi	r18, 0x01	; 1
     252:	31 09       	sbc	r19, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     254:	09 f4       	brne	.+2      	; 0x258 <dht_getdata+0xe2>
     256:	68 c0       	rjmp	.+208    	; 0x328 <dht_getdata+0x1b2>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<DHT_INPUTPIN)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<DHT_INPUTPIN)) { //wait until input get low (non blocking)
     258:	4a 99       	sbic	0x09, 2	; 9
     25a:	fa cf       	rjmp	.-12     	; 0x250 <dht_getdata+0xda>
     25c:	41 50       	subi	r20, 0x01	; 1
     25e:	51 09       	sbc	r21, r1
     260:	18 f7       	brcc	.-58     	; 0x228 <dht_getdata+0xb2>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     262:	d8 01       	movw	r26, r16
     264:	8d 93       	st	X+, r24
     266:	8d 01       	movw	r16, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     268:	ac 15       	cp	r26, r12
     26a:	bd 05       	cpc	r27, r13
     26c:	21 f0       	breq	.+8      	; 0x276 <dht_getdata+0x100>

/*
 * get data from sensor
 */
#if DHT_FLOAT == 1
int8_t dht_getdata(float *temperature, float *humidity) {
     26e:	4f 2d       	mov	r20, r15
     270:	5b 2d       	mov	r21, r11
     272:	86 2f       	mov	r24, r22
     274:	d9 cf       	rjmp	.-78     	; 0x228 <dht_getdata+0xb2>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<DHT_INPUTPIN); //output
     276:	52 9a       	sbi	0x0a, 2	; 10
	DHT_PORT |= (1<<DHT_INPUTPIN); //low
     278:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27a:	bf ef       	ldi	r27, 0xFF	; 255
     27c:	e1 ee       	ldi	r30, 0xE1	; 225
     27e:	f4 e0       	ldi	r31, 0x04	; 4
     280:	b1 50       	subi	r27, 0x01	; 1
     282:	e0 40       	sbci	r30, 0x00	; 0
     284:	f0 40       	sbci	r31, 0x00	; 0
     286:	e1 f7       	brne	.-8      	; 0x280 <dht_getdata+0x10a>
     288:	00 c0       	rjmp	.+0      	; 0x28a <dht_getdata+0x114>
     28a:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     28c:	29 81       	ldd	r18, Y+1	; 0x01
     28e:	ea 80       	ldd	r14, Y+2	; 0x02
     290:	9b 81       	ldd	r25, Y+3	; 0x03
     292:	6c 81       	ldd	r22, Y+4	; 0x04
     294:	8e 2d       	mov	r24, r14
     296:	82 0f       	add	r24, r18
     298:	89 0f       	add	r24, r25
     29a:	86 0f       	add	r24, r22
     29c:	3d 81       	ldd	r19, Y+5	; 0x05
     29e:	83 13       	cpse	r24, r19
     2a0:	45 c0       	rjmp	.+138    	; 0x32c <dht_getdata+0x1b6>
     2a2:	63 01       	movw	r12, r6
		//return temperature and humidity
		uint16_t rawhumidity = bits[0]<<8 | bits[1];
     2a4:	f1 2c       	mov	r15, r1
     2a6:	f2 2a       	or	r15, r18
		uint16_t rawtemperature = bits[2]<<8 | bits[3];
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	79 2b       	or	r23, r25
		if(rawtemperature & 0x8000) {
     2ac:	77 23       	and	r23, r23
     2ae:	a4 f4       	brge	.+40     	; 0x2d8 <dht_getdata+0x162>
			*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
     2b0:	7f 77       	andi	r23, 0x7F	; 127
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e2       	ldi	r20, 0x20	; 32
     2c0:	51 e4       	ldi	r21, 0x41	; 65
     2c2:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     2c6:	dc 01       	movw	r26, r24
     2c8:	cb 01       	movw	r24, r22
     2ca:	b0 58       	subi	r27, 0x80	; 128
     2cc:	f4 01       	movw	r30, r8
     2ce:	80 83       	st	Z, r24
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	a2 83       	std	Z+2, r26	; 0x02
     2d4:	b3 83       	std	Z+3, r27	; 0x03
     2d6:	10 c0       	rjmp	.+32     	; 0x2f8 <dht_getdata+0x182>
		} else {
			*temperature = (float)(rawtemperature)/10.0;
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e2       	ldi	r20, 0x20	; 32
     2e6:	51 e4       	ldi	r21, 0x41	; 65
     2e8:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     2ec:	d4 01       	movw	r26, r8
     2ee:	6d 93       	st	X+, r22
     2f0:	7d 93       	st	X+, r23
     2f2:	8d 93       	st	X+, r24
     2f4:	9c 93       	st	X, r25
     2f6:	13 97       	sbiw	r26, 0x03	; 3
		}
		*humidity = (float)(rawhumidity)/10.0;
     2f8:	b7 01       	movw	r22, r14
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatunsisf>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e2       	ldi	r20, 0x20	; 32
     308:	51 e4       	ldi	r21, 0x41	; 65
     30a:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     30e:	f6 01       	movw	r30, r12
     310:	60 83       	st	Z, r22
     312:	71 83       	std	Z+1, r23	; 0x01
     314:	82 83       	std	Z+2, r24	; 0x02
     316:	93 83       	std	Z+3, r25	; 0x03
		return 0;
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	09 c0       	rjmp	.+18     	; 0x32e <dht_getdata+0x1b8>
	DHT_DDR &= ~(1<<DHT_INPUTPIN); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<DHT_INPUTPIN))) {
		return -1;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	07 c0       	rjmp	.+14     	; 0x32e <dht_getdata+0x1b8>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
		return -1;
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	05 c0       	rjmp	.+10     	; 0x32e <dht_getdata+0x1b8>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	03 c0       	rjmp	.+6      	; 0x32e <dht_getdata+0x1b8>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<DHT_INPUTPIN)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	01 c0       	rjmp	.+2      	; 0x32e <dht_getdata+0x1b8>
		}
		*humidity = (float)(rawhumidity)/10.0;
		return 0;
	}

	return -1;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	9f 90       	pop	r9
     34c:	8f 90       	pop	r8
     34e:	7f 90       	pop	r7
     350:	6f 90       	pop	r6
     352:	08 95       	ret

00000354 <dht_gettemperature>:

/*
 * get temperature
 */
#if DHT_FLOAT == 1
int8_t dht_gettemperature(float *temperature) {
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	00 d0       	rcall	.+0      	; 0x35a <dht_gettemperature+0x6>
     35a:	00 d0       	rcall	.+0      	; 0x35c <dht_gettemperature+0x8>
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
	float humidity = 0;
     360:	19 82       	std	Y+1, r1	; 0x01
     362:	1a 82       	std	Y+2, r1	; 0x02
     364:	1b 82       	std	Y+3, r1	; 0x03
     366:	1c 82       	std	Y+4, r1	; 0x04
#elif DHT_FLOAT == 0
int8_t dht_gettemperature(int8_t *temperature) {
	int8_t humidity = 0;
#endif
	return dht_getdata(temperature, &humidity);
     368:	be 01       	movw	r22, r28
     36a:	6f 5f       	subi	r22, 0xFF	; 255
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	0e 94 bb 00 	call	0x176	; 0x176 <dht_getdata>
}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <turnOnFan>:
	hbridge_PORT |= ((1<<hbridge_ENA) | (1<<hbridge_ENB));
}

void turnOnFan()
{
	hbridge_PORT|= (HIGH<<hbridge_ENA);
     380:	5e 9a       	sbi	0x0b, 6	; 11
	hbridge_PORT |= (HIGH<<hbridge_IN1);
     382:	5f 9a       	sbi	0x0b, 7	; 11
     384:	08 95       	ret

00000386 <turnOffFan>:
}
void turnOffFan()
{
	hbridge_PORT&= ~(HIGH<<hbridge_ENA);
     386:	5e 98       	cbi	0x0b, 6	; 11

	hbridge_PORT &= ~((HIGH<<hbridge_IN1));
     388:	5f 98       	cbi	0x0b, 7	; 11
     38a:	08 95       	ret

0000038c <turnOnPump>:
}
void turnOnPump()
{
	hbridge_PORT|= (HIGH<<hbridge_ENB);
     38c:	5d 9a       	sbi	0x0b, 5	; 11
	hbridge_PORT |= (HIGH<<hbridge_IN3);
     38e:	5b 9a       	sbi	0x0b, 3	; 11
     390:	08 95       	ret

00000392 <turnOffPump>:
}
void turnOffPump()
{
	hbridge_PORT &= ~(HIGH<<hbridge_ENB);
     392:	5d 98       	cbi	0x0b, 5	; 11
	hbridge_PORT &= ~(HIGH<<hbridge_IN3);
     394:	5b 98       	cbi	0x0b, 3	; 11
     396:	08 95       	ret

00000398 <Lcd4_Port>:

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
	if(a & 1)
     398:	80 ff       	sbrs	r24, 0
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <Lcd4_Port+0xa>
		PORTC &= ~(1<<PORTC5);
	}
	else
	{
		if(a == PORTB2)
		PORTB |= (1<<PORTB2);
     39c:	95 b1       	in	r25, 0x05	; 5
     39e:	95 b9       	out	0x05, r25	; 5
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <Lcd4_Port+0xe>
{
	if(b == 0)
	{
		
		if(a == PORTB2)
		PORTB &= ~(1<<PORTB2);
     3a2:	95 b1       	in	r25, 0x05	; 5
     3a4:	95 b9       	out	0x05, r25	; 5
	if(a & 1)
	pinChange(D4,1);
	else
	pinChange(D4,0);
	
	if(a & 2)
     3a6:	81 ff       	sbrs	r24, 1
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <Lcd4_Port+0x18>
	else
	{
		if(a == PORTB2)
		PORTB |= (1<<PORTB2);
		else if(a == PORTB3)
		PORTB |= (1<<PORTB3);
     3aa:	95 b1       	in	r25, 0x05	; 5
     3ac:	95 b9       	out	0x05, r25	; 5
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Lcd4_Port+0x1c>
	{
		
		if(a == PORTB2)
		PORTB &= ~(1<<PORTB2);
		else if(a == PORTB3)
		PORTB &= ~(1<<PORTB3);
     3b0:	95 b1       	in	r25, 0x05	; 5
     3b2:	95 b9       	out	0x05, r25	; 5
	if(a & 2)
	pinChange(D5,1);
	else
	pinChange(D5,0);
	
	if(a & 4)
     3b4:	82 ff       	sbrs	r24, 2
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <Lcd4_Port+0x26>
		if(a == PORTB2)
		PORTB |= (1<<PORTB2);
		else if(a == PORTB3)
		PORTB |= (1<<PORTB3);
		else if(a == PORTB4)
		PORTB |= (1<<PORTB4);
     3b8:	95 b1       	in	r25, 0x05	; 5
     3ba:	95 b9       	out	0x05, r25	; 5
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Lcd4_Port+0x2a>
		if(a == PORTB2)
		PORTB &= ~(1<<PORTB2);
		else if(a == PORTB3)
		PORTB &= ~(1<<PORTB3);
		else if(a == PORTB4)
		PORTB &= ~(1<<PORTB4);
     3be:	95 b1       	in	r25, 0x05	; 5
     3c0:	95 b9       	out	0x05, r25	; 5
	if(a & 4)
	pinChange(D6,1);
	else
	pinChange(D6,0);
	
	if(a & 8)
     3c2:	83 ff       	sbrs	r24, 3
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <Lcd4_Port+0x34>
		else if(a == PORTB3)
		PORTB |= (1<<PORTB3);
		else if(a == PORTB4)
		PORTB |= (1<<PORTB4);
		else if(a == PORTB5)
		PORTB |= (1<<PORTB5);
     3c6:	85 b1       	in	r24, 0x05	; 5
     3c8:	85 b9       	out	0x05, r24	; 5
     3ca:	08 95       	ret
		else if(a == PORTB3)
		PORTB &= ~(1<<PORTB3);
		else if(a == PORTB4)
		PORTB &= ~(1<<PORTB4);
		else if(a == PORTB5)
		PORTB &= ~(1<<PORTB5);
     3cc:	85 b1       	in	r24, 0x05	; 5
     3ce:	85 b9       	out	0x05, r24	; 5
     3d0:	08 95       	ret

000003d2 <Lcd4_Cmd>:
		else if(a == PORTC4)
		PORTC &= ~(1<<PORTC4);
     3d2:	98 b1       	in	r25, 0x08	; 8
     3d4:	98 b9       	out	0x08, r25	; 8
	pinChange(D7,0);
}
void Lcd4_Cmd(char a)
{
	pinChange(RS,0);             // => RS = 0
	Lcd4_Port(a);
     3d6:	0e 94 cc 01 	call	0x398	; 0x398 <Lcd4_Port>
		else if(a == PORTB5)
		PORTB |= (1<<PORTB5);
		else if(a == PORTC4)
		PORTC |= (1<<PORTC4);
		else if(a == PORTC5)
		PORTC |= (1<<PORTC5);
     3da:	88 b1       	in	r24, 0x08	; 8
     3dc:	88 b9       	out	0x08, r24	; 8
     3de:	89 ef       	ldi	r24, 0xF9	; 249
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <Lcd4_Cmd+0x10>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <Lcd4_Cmd+0x16>
     3e8:	00 00       	nop
		else if(a == PORTB5)
		PORTB &= ~(1<<PORTB5);
		else if(a == PORTC4)
		PORTC &= ~(1<<PORTC4);
		else if(a == PORTC5)
		PORTC &= ~(1<<PORTC5);
     3ea:	88 b1       	in	r24, 0x08	; 8
     3ec:	88 b9       	out	0x08, r24	; 8
     3ee:	89 ef       	ldi	r24, 0xF9	; 249
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <Lcd4_Cmd+0x20>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <Lcd4_Cmd+0x26>
     3f8:	00 00       	nop
     3fa:	08 95       	ret

000003fc <Lcd4_Clear>:
	_delay_ms(1);
}

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
     408:	08 95       	ret

0000040a <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     40a:	cf 93       	push	r28
     40c:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	59 f4       	brne	.+22     	; 0x428 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
     412:	80 e8       	ldi	r24, 0x80	; 128
     414:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     416:	82 95       	swap	r24
     418:	8f 70       	andi	r24, 0x0F	; 15
     41a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     41e:	8c 2f       	mov	r24, r28
     420:	8f 70       	andi	r24, 0x0F	; 15
     422:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
     426:	26 c0       	rjmp	.+76     	; 0x474 <Lcd4_Set_Cursor+0x6a>
	}
	else if(a == 2)
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	59 f4       	brne	.+22     	; 0x442 <Lcd4_Set_Cursor+0x38>
	{
		temp = 0xC0 + b;
     42c:	80 ec       	ldi	r24, 0xC0	; 192
     42e:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     430:	82 95       	swap	r24
     432:	8f 70       	andi	r24, 0x0F	; 15
     434:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     438:	8c 2f       	mov	r24, r28
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
     440:	19 c0       	rjmp	.+50     	; 0x474 <Lcd4_Set_Cursor+0x6a>
	}
	else if(a == 3)
     442:	83 30       	cpi	r24, 0x03	; 3
     444:	59 f4       	brne	.+22     	; 0x45c <Lcd4_Set_Cursor+0x52>
	{
		temp = 0x94 + b;
     446:	cc 56       	subi	r28, 0x6C	; 108
		z = temp>>4;
		y = (0x94+b) & 0x0F;
		Lcd4_Cmd(z);
     448:	8c 2f       	mov	r24, r28
     44a:	82 95       	swap	r24
     44c:	8f 70       	andi	r24, 0x0F	; 15
     44e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     452:	8c 2f       	mov	r24, r28
     454:	8f 70       	andi	r24, 0x0F	; 15
     456:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
     45a:	0c c0       	rjmp	.+24     	; 0x474 <Lcd4_Set_Cursor+0x6a>
	}
	else if(a == 4)
     45c:	84 30       	cpi	r24, 0x04	; 4
     45e:	51 f4       	brne	.+20     	; 0x474 <Lcd4_Set_Cursor+0x6a>
	{
		temp = 0xD4 + b;
     460:	cc 52       	subi	r28, 0x2C	; 44
		z = temp>>4;
		y = (0xD4+b) & 0x0F;
		Lcd4_Cmd(z);
     462:	8c 2f       	mov	r24, r28
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     46c:	8c 2f       	mov	r24, r28
     46e:	8f 70       	andi	r24, 0x0F	; 15
     470:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	}
}
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 cc 01 	call	0x398	; 0x398 <Lcd4_Port>
     47e:	87 e8       	ldi	r24, 0x87	; 135
     480:	93 e1       	ldi	r25, 0x13	; 19
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <Lcd4_Init+0xa>
     486:	00 c0       	rjmp	.+0      	; 0x488 <Lcd4_Init+0x10>
     488:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
     490:	81 ee       	ldi	r24, 0xE1	; 225
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <Lcd4_Init+0x1c>
     498:	00 c0       	rjmp	.+0      	; 0x49a <Lcd4_Init+0x22>
     49a:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
     4a2:	8d eb       	ldi	r24, 0xBD	; 189
     4a4:	9a e0       	ldi	r25, 0x0A	; 10
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <Lcd4_Init+0x2e>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <Lcd4_Init+0x34>
     4ac:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     4c0:	88 e0       	ldi	r24, 0x08	; 8
     4c2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Lcd4_Cmd>
     4de:	08 95       	ret

000004e0 <Lcd4_Write_Char>:
	//Lcd4_Cmd(0x00);
	//Lcd4_Cmd(0x06);
}

void Lcd4_Write_Char(char a)
{
     4e0:	cf 93       	push	r28
     4e2:	c8 2f       	mov	r28, r24
		else if(a == PORTB4)
		PORTB |= (1<<PORTB4);
		else if(a == PORTB5)
		PORTB |= (1<<PORTB5);
		else if(a == PORTC4)
		PORTC |= (1<<PORTC4);
     4e4:	88 b1       	in	r24, 0x08	; 8
     4e6:	88 b9       	out	0x08, r24	; 8
{
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
	Lcd4_Port(y>>4);             //Data transfer
     4e8:	8c 2f       	mov	r24, r28
     4ea:	82 95       	swap	r24
     4ec:	8f 70       	andi	r24, 0x0F	; 15
     4ee:	0e 94 cc 01 	call	0x398	; 0x398 <Lcd4_Port>
		else if(a == PORTB5)
		PORTB |= (1<<PORTB5);
		else if(a == PORTC4)
		PORTC |= (1<<PORTC4);
		else if(a == PORTC5)
		PORTC |= (1<<PORTC5);
     4f2:	88 b1       	in	r24, 0x08	; 8
     4f4:	88 b9       	out	0x08, r24	; 8
     4f6:	89 ef       	ldi	r24, 0xF9	; 249
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <Lcd4_Write_Char+0x1a>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <Lcd4_Write_Char+0x20>
     500:	00 00       	nop
		else if(a == PORTB5)
		PORTB &= ~(1<<PORTB5);
		else if(a == PORTC4)
		PORTC &= ~(1<<PORTC4);
		else if(a == PORTC5)
		PORTC &= ~(1<<PORTC5);
     502:	88 b1       	in	r24, 0x08	; 8
     504:	88 b9       	out	0x08, r24	; 8
     506:	89 ef       	ldi	r24, 0xF9	; 249
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <Lcd4_Write_Char+0x2a>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <Lcd4_Write_Char+0x30>
     510:	00 00       	nop
	Lcd4_Port(y>>4);             //Data transfer
	pinChange(EN,1);
	_delay_ms(1);
	pinChange(EN,0);
	_delay_ms(1);
	Lcd4_Port(temp);
     512:	8c 2f       	mov	r24, r28
     514:	8f 70       	andi	r24, 0x0F	; 15
     516:	0e 94 cc 01 	call	0x398	; 0x398 <Lcd4_Port>
		else if(a == PORTB5)
		PORTB |= (1<<PORTB5);
		else if(a == PORTC4)
		PORTC |= (1<<PORTC4);
		else if(a == PORTC5)
		PORTC |= (1<<PORTC5);
     51a:	88 b1       	in	r24, 0x08	; 8
     51c:	88 b9       	out	0x08, r24	; 8
     51e:	89 ef       	ldi	r24, 0xF9	; 249
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <Lcd4_Write_Char+0x42>
     526:	00 c0       	rjmp	.+0      	; 0x528 <Lcd4_Write_Char+0x48>
     528:	00 00       	nop
		else if(a == PORTB5)
		PORTB &= ~(1<<PORTB5);
		else if(a == PORTC4)
		PORTC &= ~(1<<PORTC4);
		else if(a == PORTC5)
		PORTC &= ~(1<<PORTC5);
     52a:	88 b1       	in	r24, 0x08	; 8
     52c:	88 b9       	out	0x08, r24	; 8
     52e:	89 ef       	ldi	r24, 0xF9	; 249
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <Lcd4_Write_Char+0x52>
     536:	00 c0       	rjmp	.+0      	; 0x538 <Lcd4_Write_Char+0x58>
     538:	00 00       	nop
	Lcd4_Port(temp);
	pinChange(EN,1);
	_delay_ms(1);
	pinChange(EN,0);
	_delay_ms(1);
}
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     544:	88 81       	ld	r24, Y
     546:	88 23       	and	r24, r24
     548:	31 f0       	breq	.+12     	; 0x556 <Lcd4_Write_String+0x18>
     54a:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     54c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     550:	89 91       	ld	r24, Y+
     552:	81 11       	cpse	r24, r1
     554:	fb cf       	rjmp	.-10     	; 0x54c <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <initRelay>:
	}
}
void initRelay()
{
	//	set as output
	relay_DDR |= (1<<relay_OUTPUTPIN); 
     55c:	20 9a       	sbi	0x04, 0	; 4
	//	initialize as low
	relay_PORT &= ~(1<<relay_OUTPUTPIN);
     55e:	28 98       	cbi	0x05, 0	; 5
     560:	08 95       	ret

00000562 <initMainLCD>:
}

void initMainLCD()
{
	//	Initialize Pins for LCD as outputs
	DDRB |= (1<<DDB2)|(1<<DDB3)|(1<<DDB4)|(1<<DDB5);
     562:	84 b1       	in	r24, 0x04	; 4
     564:	8c 63       	ori	r24, 0x3C	; 60
     566:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1<<DDC4)|(1<<DDC5);
     568:	87 b1       	in	r24, 0x07	; 7
     56a:	80 63       	ori	r24, 0x30	; 48
     56c:	87 b9       	out	0x07, r24	; 7
	//Clear LCD
	Lcd4_Clear();
     56e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Lcd4_Clear>
	//Run initalization of the LCD
	Lcd4_Init();
     572:	0e 94 3c 02 	call	0x478	; 0x478 <Lcd4_Init>
     576:	08 95       	ret

00000578 <initHbridge>:
}

void initHbridge()
{
	DDRD |= (11101000); 
     578:	8a b1       	in	r24, 0x0a	; 10
     57a:	88 64       	ori	r24, 0x48	; 72
     57c:	8a b9       	out	0x0a, r24	; 10
     57e:	08 95       	ret

00000580 <initServo>:
}

void initServo()
{
	////Servo
	DDRB |= (1<<DDB1);
     580:	21 9a       	sbi	0x04, 1	; 4
	//	Servo Timer (ISR)
	TCCR1A|=(1<<COM1A1)|(1<<COM1A0)|(1<<WGM11);        //NON Inverted PWM
     582:	e0 e8       	ldi	r30, 0x80	; 128
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	82 6c       	ori	r24, 0xC2	; 194
     58a:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
     58c:	e1 e8       	ldi	r30, 0x81	; 129
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	8b 61       	ori	r24, 0x1B	; 27
     594:	80 83       	st	Z, r24
	//fPWM=16MHz
	//ICR1=5000-1;  
	PORTB |= (1<<PORTB1);
     596:	29 9a       	sbi	0x05, 1	; 5
     598:	08 95       	ret

0000059a <initADC>:
}

void initADC()
{
	//	Initialize ADC Ports
	DDRC &= ~((0<<DDC0)|(0<<DDC1)|(0<<DDC2)|(0<<DDC3));
     59a:	87 b1       	in	r24, 0x07	; 7
     59c:	87 b9       	out	0x07, r24	; 7
	PORTD |= (1<<PORTD2);
     59e:	5a 9a       	sbi	0x0b, 2	; 11
     5a0:	08 95       	ret

000005a2 <custSetup>:
		temp_high = 55;
		sTemp = 40;
	#endif
	#ifdef CUSTOM
		//	CUSTOM PLANT
		temp_low = 23;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	a8 eb       	ldi	r26, 0xB8	; 184
     5a8:	b1 e4       	ldi	r27, 0x41	; 65
     5aa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <temp_low>
     5ae:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <temp_low+0x1>
     5b2:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <temp_low+0x2>
     5b6:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <temp_low+0x3>
		temp_high = 24;
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	60 ec       	ldi	r22, 0xC0	; 192
     5c0:	71 e4       	ldi	r23, 0x41	; 65
     5c2:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <temp_high>
     5c6:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <temp_high+0x1>
     5ca:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <temp_high+0x2>
     5ce:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <temp_high+0x3>
		sTemp = 23;
     5d2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     5d6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     5da:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     5de:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
     5e2:	08 95       	ret

000005e4 <LCDSetup>:
	#endif 
}

void LCDSetup(){
	//	LCD Setup
	Lcd4_Set_Cursor(1,0);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	//	preset temp
	Lcd4_Write_String("St:"); 
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	Lcd4_Set_Cursor(1,4);
     5f8:	64 e0       	ldi	r22, 0x04	; 4
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	itoa(sTemp,buf2,10);
     604:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <__data_end>
     608:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <__data_end+0x1>
     60c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end+0x2>
     610:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <__data_end+0x3>
     614:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     61c:	4a e0       	ldi	r20, 0x0A	; 10
     61e:	6b e7       	ldi	r22, 0x7B	; 123
     620:	71 e0       	ldi	r23, 0x01	; 1
     622:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
	Lcd4_Write_String(buf2);
     626:	8b e7       	ldi	r24, 0x7B	; 123
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	Lcd4_Set_Cursor(1,7);
     62e:	67 e0       	ldi	r22, 0x07	; 7
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	//	inside Temp
	Lcd4_Write_String("It"); 
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	//	light values
	Lcd4_Set_Cursor(2,0);
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	Lcd4_Write_String("L:");
     64e:	82 e5       	ldi	r24, 0x52	; 82
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	//	action bar
	Lcd4_Set_Cursor(3,0);
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Action:");
     662:	87 e0       	ldi	r24, 0x07	; 7
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	//	error bar
	Lcd4_Set_Cursor(4,0);
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Error:");
     676:	8f e0       	ldi	r24, 0x0F	; 15
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     67e:	08 95       	ret

00000680 <temp_light>:
}

void temp_light()
{
	//get photoresistor value
	lhtVal1 = analogPhoto1Read();
     680:	0e 94 87 00 	call	0x10e	; 0x10e <analogPhoto1Read>
     684:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <lhtVal1+0x1>
     688:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <lhtVal1>
	lhtVal2 = analogPhoto2Read();
     68c:	0e 94 a1 00 	call	0x142	; 0x142 <analogPhoto2Read>
     690:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <lhtVal2+0x1>
     694:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <lhtVal2>
	//	lcd display
	Lcd4_Set_Cursor(2,2);
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	Lcd4_Write_String("                  ");
     6a4:	86 e1       	ldi	r24, 0x16	; 22
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
     6ac:	62 e0       	ldi	r22, 0x02	; 2
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	itoa(lhtVal1,buffer,10);
     6b8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <lhtVal1>
     6bc:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <lhtVal1+0x1>
     6c0:	4a e0       	ldi	r20, 0x0A	; 10
     6c2:	65 e8       	ldi	r22, 0x85	; 133
     6c4:	71 e0       	ldi	r23, 0x01	; 1
     6c6:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
	Lcd4_Write_String(buffer);
     6ca:	85 e8       	ldi	r24, 0x85	; 133
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,7);
     6d2:	67 e0       	ldi	r22, 0x07	; 7
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	itoa(lhtVal2,buffer,10);
     6de:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <lhtVal2>
     6e2:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <lhtVal2+0x1>
     6e6:	4a e0       	ldi	r20, 0x0A	; 10
     6e8:	65 e8       	ldi	r22, 0x85	; 133
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
	Lcd4_Write_String(buffer);
     6f0:	85 e8       	ldi	r24, 0x85	; 133
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
	//Lcd4_Write_String("Dark >450");
	/*Check temperature*/
	//	get DHT data
	dht_gettemperature(&temp);
     6f8:	87 e7       	ldi	r24, 0x77	; 119
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 aa 01 	call	0x354	; 0x354 <dht_gettemperature>
	/*Display temp*/
	Lcd4_Set_Cursor(1,10);
     700:	6a e0       	ldi	r22, 0x0A	; 10
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
	itoa(temp,buf2,10);
     70c:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     710:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     714:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     718:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     71c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	4a e0       	ldi	r20, 0x0A	; 10
     726:	6b e7       	ldi	r22, 0x7B	; 123
     728:	71 e0       	ldi	r23, 0x01	; 1
     72a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
	Lcd4_Write_String(buf2);
     72e:	8b e7       	ldi	r24, 0x7B	; 123
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>

	if((lhtVal1 > 500)&&(lhtVal2 < 500)) //Dark Reading 
     736:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <lhtVal1>
     73a:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <lhtVal1+0x1>
     73e:	85 3f       	cpi	r24, 0xF5	; 245
     740:	91 40       	sbci	r25, 0x01	; 1
     742:	0c f4       	brge	.+2      	; 0x746 <temp_light+0xc6>
     744:	9c c0       	rjmp	.+312    	; 0x87e <temp_light+0x1fe>
     746:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <lhtVal2>
     74a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <lhtVal2+0x1>
     74e:	84 3f       	cpi	r24, 0xF4	; 244
     750:	91 40       	sbci	r25, 0x01	; 1
     752:	0c f0       	brlt	.+2      	; 0x756 <temp_light+0xd6>
     754:	94 c0       	rjmp	.+296    	; 0x87e <temp_light+0x1fe>
	{
			//Lcd4_Write_String("Dark >450");
			/*Check temperature*/
			//	get DHT data
			dht_gettemperature(&temp);
     756:	87 e7       	ldi	r24, 0x77	; 119
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 aa 01 	call	0x354	; 0x354 <dht_gettemperature>
			/*Display temp*/
			Lcd4_Set_Cursor(1,10);
     75e:	6a e0       	ldi	r22, 0x0A	; 10
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			itoa(temp,buf2,10);
     76a:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     76e:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     772:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     776:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     77a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	4a e0       	ldi	r20, 0x0A	; 10
     784:	6b e7       	ldi	r22, 0x7B	; 123
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
			Lcd4_Write_String(buf2);
     78c:	8b e7       	ldi	r24, 0x7B	; 123
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>

			if(temp >= temp_high)
     794:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     798:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     79c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     7a0:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     7a4:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <temp_high>
     7a8:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <temp_high+0x1>
     7ac:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <temp_high+0x2>
     7b0:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <temp_high+0x3>
     7b4:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     7b8:	88 23       	and	r24, r24
     7ba:	dc f0       	brlt	.+54     	; 0x7f2 <temp_light+0x172>
			{	
				lightOff();			
     7bc:	0e 94 2b 07 	call	0xe56	; 0xe56 <lightOff>
				ZeroDegree(); 
     7c0:	0e 94 3c 07 	call	0xe78	; 0xe78 <ZeroDegree>
				turnOnFan();
     7c4:	0e 94 c0 01 	call	0x380	; 0x380 <turnOnFan>
						
				Lcd4_Set_Cursor(3,7);
     7c8:	67 e0       	ldi	r22, 0x07	; 7
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	83 e0       	ldi	r24, 0x03	; 3
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("             ");
     7d4:	8b e1       	ldi	r24, 0x1B	; 27
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     7dc:	67 e0       	ldi	r22, 0x07	; 7
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("lF,sF,fO,"); //print actuators to action line
     7e8:	89 e2       	ldi	r24, 0x29	; 41
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     7f0:	08 95       	ret
			}
			else if(temp < temp_low)
     7f2:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     7f6:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     7fa:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     7fe:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     802:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <temp_low>
     806:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <temp_low+0x1>
     80a:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <temp_low+0x2>
     80e:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <temp_low+0x3>
     812:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__cmpsf2>
     816:	88 23       	and	r24, r24
     818:	dc f4       	brge	.+54     	; 0x850 <temp_light+0x1d0>
			{				
				lightOn();			
     81a:	0e 94 29 07 	call	0xe52	; 0xe52 <lightOn>
				EightyDegree();			
     81e:	0e 94 45 07 	call	0xe8a	; 0xe8a <EightyDegree>
				turnOffFan();
     822:	0e 94 c3 01 	call	0x386	; 0x386 <turnOffFan>
				
				Lcd4_Set_Cursor(3,7);
     826:	67 e0       	ldi	r22, 0x07	; 7
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("             ");
     832:	8b e1       	ldi	r24, 0x1B	; 27
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("lO,sO,fF");  //print actuators to action line
     846:	83 e3       	ldi	r24, 0x33	; 51
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     84e:	08 95       	ret
			}
			else
			{		
			    lightOff();				
     850:	0e 94 2b 07 	call	0xe56	; 0xe56 <lightOff>
			    //EightyDegree();			
				Lcd4_Set_Cursor(3,7);
     854:	67 e0       	ldi	r22, 0x07	; 7
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("             ");
     860:	8b e1       	ldi	r24, 0x1B	; 27
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     868:	67 e0       	ldi	r22, 0x07	; 7
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("lF,sO");  //print actuators to action line
     874:	8c e3       	ldi	r24, 0x3C	; 60
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     87c:	08 95       	ret
			}
	}
	else if((lhtVal1<300) && (lhtVal2>800))//bright
     87e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <lhtVal1>
     882:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <lhtVal1+0x1>
     886:	8c 32       	cpi	r24, 0x2C	; 44
     888:	91 40       	sbci	r25, 0x01	; 1
     88a:	0c f0       	brlt	.+2      	; 0x88e <temp_light+0x20e>
     88c:	bb c0       	rjmp	.+374    	; 0xa04 <__stack+0x105>
     88e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <lhtVal2>
     892:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <lhtVal2+0x1>
     896:	81 32       	cpi	r24, 0x21	; 33
     898:	93 40       	sbci	r25, 0x03	; 3
     89a:	0c f4       	brge	.+2      	; 0x89e <temp_light+0x21e>
     89c:	b3 c0       	rjmp	.+358    	; 0xa04 <__stack+0x105>
		//Lcd4_Write_String("                  ");
		//Lcd4_Set_Cursor(2,2);
		//Lcd4_Write_String("Bright <350");
		/*Check temperature*/
		//	get DHT data
		dht_gettemperature(&temp);
     89e:	87 e7       	ldi	r24, 0x77	; 119
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 aa 01 	call	0x354	; 0x354 <dht_gettemperature>
		/*Display temp*/
		Lcd4_Set_Cursor(1,10);
     8a6:	6a e0       	ldi	r22, 0x0A	; 10
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
		itoa(temp,buf2,10);
     8b2:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     8b6:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     8ba:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     8be:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     8c2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	4a e0       	ldi	r20, 0x0A	; 10
     8cc:	6b e7       	ldi	r22, 0x7B	; 123
     8ce:	71 e0       	ldi	r23, 0x01	; 1
     8d0:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
		Lcd4_Write_String(buf2);
     8d4:	8b e7       	ldi	r24, 0x7B	; 123
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>

		if(temp >= temp_high)
     8dc:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     8e0:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     8e4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     8e8:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     8ec:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <temp_high>
     8f0:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <temp_high+0x1>
     8f4:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <temp_high+0x2>
     8f8:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <temp_high+0x3>
     8fc:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     900:	88 23       	and	r24, r24
     902:	cc f0       	brlt	.+50     	; 0x936 <__stack+0x37>
		{	
				lightOff();
     904:	0e 94 2b 07 	call	0xe56	; 0xe56 <lightOff>
				turnOnFan();
     908:	0e 94 c0 01 	call	0x380	; 0x380 <turnOnFan>
				//ZeroDegree();
			Lcd4_Set_Cursor(3,7);
     90c:	67 e0       	ldi	r22, 0x07	; 7
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     918:	8b e1       	ldi	r24, 0x1B	; 27
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     920:	67 e0       	ldi	r22, 0x07	; 7
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	83 e0       	ldi	r24, 0x03	; 3
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("lF,sF,fO"); //print actuators to action line
     92c:	82 e4       	ldi	r24, 0x42	; 66
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     934:	08 95       	ret
		}
		else if(temp < temp_low)
     936:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     93a:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     93e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     942:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     946:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <temp_low>
     94a:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <temp_low+0x1>
     94e:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <temp_low+0x2>
     952:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <temp_low+0x3>
     956:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__cmpsf2>
     95a:	88 23       	and	r24, r24
     95c:	dc f4       	brge	.+54     	; 0x994 <__stack+0x95>
		{	
				lightOn();
     95e:	0e 94 29 07 	call	0xe52	; 0xe52 <lightOn>
				turnOffFan();
     962:	0e 94 c3 01 	call	0x386	; 0x386 <turnOffFan>
				EightyDegree();
     966:	0e 94 45 07 	call	0xe8a	; 0xe8a <EightyDegree>
			Lcd4_Set_Cursor(3,7);
     96a:	67 e0       	ldi	r22, 0x07	; 7
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     976:	8b e1       	ldi	r24, 0x1B	; 27
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     97e:	67 e0       	ldi	r22, 0x07	; 7
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("lO,sO,fF");  //print actuators to action line
     98a:	83 e3       	ldi	r24, 0x33	; 51
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     992:	08 95       	ret
		//Lcd4_Write_String("                  ");
		//Lcd4_Set_Cursor(2,2);
		//Lcd4_Write_String("Norm 350<L<450");
		/*Check temperature*/
		//	get DHT data
		dht_gettemperature(&temp);
     994:	87 e7       	ldi	r24, 0x77	; 119
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 aa 01 	call	0x354	; 0x354 <dht_gettemperature>
		/*Display temp*/
		Lcd4_Set_Cursor(1,10);
     99c:	6a e0       	ldi	r22, 0x0A	; 10
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
		itoa(temp,buf2,10);
     9a8:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     9ac:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     9b0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     9b4:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     9b8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	4a e0       	ldi	r20, 0x0A	; 10
     9c2:	6b e7       	ldi	r22, 0x7B	; 123
     9c4:	71 e0       	ldi	r23, 0x01	; 1
     9c6:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
		Lcd4_Write_String(buf2);
     9ca:	8b e7       	ldi	r24, 0x7B	; 123
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			lightOff();
     9d2:	0e 94 2b 07 	call	0xe56	; 0xe56 <lightOff>
			turnOffFan();
     9d6:	0e 94 c3 01 	call	0x386	; 0x386 <turnOffFan>
			//ZeroDegree();
		Lcd4_Set_Cursor(3,7);
     9da:	67 e0       	ldi	r22, 0x07	; 7
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
		Lcd4_Write_String("             ");
     9e6:	8b e1       	ldi	r24, 0x1B	; 27
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
		Lcd4_Set_Cursor(3,7);
     9ee:	67 e0       	ldi	r22, 0x07	; 7
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
		Lcd4_Write_String("lF,fF"); //print actuators to action line
     9fa:	8b e4       	ldi	r24, 0x4B	; 75
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     a02:	08 95       	ret
		//Lcd4_Write_String("                  ");
		//Lcd4_Set_Cursor(2,2);
		//Lcd4_Write_String("Bright <350");
		/*Check temperature*/
		//	get DHT data
		dht_gettemperature(&temp);
     a04:	87 e7       	ldi	r24, 0x77	; 119
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 aa 01 	call	0x354	; 0x354 <dht_gettemperature>
		/*Display temp*/
		Lcd4_Set_Cursor(1,10);
     a0c:	6a e0       	ldi	r22, 0x0A	; 10
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
		itoa(temp,buf2,10);
     a18:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     a1c:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     a20:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     a24:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     a28:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	4a e0       	ldi	r20, 0x0A	; 10
     a32:	6b e7       	ldi	r22, 0x7B	; 123
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
		Lcd4_Write_String(buf2);
     a3a:	8b e7       	ldi	r24, 0x7B	; 123
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>

		if(temp >= temp_high)
     a42:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     a46:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     a4a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     a4e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     a52:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <temp_high>
     a56:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <temp_high+0x1>
     a5a:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <temp_high+0x2>
     a5e:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <temp_high+0x3>
     a62:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     a66:	88 23       	and	r24, r24
     a68:	cc f0       	brlt	.+50     	; 0xa9c <__stack+0x19d>
		{
			lightOff();
     a6a:	0e 94 2b 07 	call	0xe56	; 0xe56 <lightOff>
			turnOnFan();
     a6e:	0e 94 c0 01 	call	0x380	; 0x380 <turnOnFan>
			//ZeroDegree();
			Lcd4_Set_Cursor(3,7);
     a72:	67 e0       	ldi	r22, 0x07	; 7
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     a7e:	8b e1       	ldi	r24, 0x1B	; 27
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     a86:	67 e0       	ldi	r22, 0x07	; 7
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("lF,sF,fO"); //print actuators to action line
     a92:	82 e4       	ldi	r24, 0x42	; 66
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     a9a:	08 95       	ret
		}
		else if(temp < temp_low)
     a9c:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     aa0:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     aa4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     aa8:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     aac:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <temp_low>
     ab0:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <temp_low+0x1>
     ab4:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <temp_low+0x2>
     ab8:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <temp_low+0x3>
     abc:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__cmpsf2>
     ac0:	88 23       	and	r24, r24
     ac2:	dc f4       	brge	.+54     	; 0xafa <__stack+0x1fb>
		{
			lightOn();
     ac4:	0e 94 29 07 	call	0xe52	; 0xe52 <lightOn>
			turnOffFan();
     ac8:	0e 94 c3 01 	call	0x386	; 0x386 <turnOffFan>
			EightyDegree();
     acc:	0e 94 45 07 	call	0xe8a	; 0xe8a <EightyDegree>
			Lcd4_Set_Cursor(3,7);
     ad0:	67 e0       	ldi	r22, 0x07	; 7
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     adc:	8b e1       	ldi	r24, 0x1B	; 27
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     ae4:	67 e0       	ldi	r22, 0x07	; 7
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	83 e0       	ldi	r24, 0x03	; 3
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("lO,sO,fF");  //print actuators to action line
     af0:	83 e3       	ldi	r24, 0x33	; 51
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     af8:	08 95       	ret
			//Lcd4_Write_String("                  ");
			//Lcd4_Set_Cursor(2,2);
			//Lcd4_Write_String("Norm 350<L<450");
			/*Check temperature*/
			//	get DHT data
			dht_gettemperature(&temp);
     afa:	87 e7       	ldi	r24, 0x77	; 119
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 aa 01 	call	0x354	; 0x354 <dht_gettemperature>
			/*Display temp*/
			Lcd4_Set_Cursor(1,10);
     b02:	6a e0       	ldi	r22, 0x0A	; 10
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			itoa(temp,buf2,10);
     b0e:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <temp>
     b12:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <temp+0x1>
     b16:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <temp+0x2>
     b1a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <temp+0x3>
     b1e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	4a e0       	ldi	r20, 0x0A	; 10
     b28:	6b e7       	ldi	r22, 0x7B	; 123
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
			Lcd4_Write_String(buf2);
     b30:	8b e7       	ldi	r24, 0x7B	; 123
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			lightOff();
     b38:	0e 94 2b 07 	call	0xe56	; 0xe56 <lightOff>
			turnOffFan();
     b3c:	0e 94 c3 01 	call	0x386	; 0x386 <turnOffFan>
			//ZeroDegree();
			Lcd4_Set_Cursor(3,7);
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     b4c:	8b e1       	ldi	r24, 0x1B	; 27
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     b54:	67 e0       	ldi	r22, 0x07	; 7
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("lF,fF"); //print actuators to action line
     b60:	8b e4       	ldi	r24, 0x4B	; 75
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     b68:	08 95       	ret

00000b6a <checkSoil>:
	}
}


void checkSoil()
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
		//	water level loop
		int soillvl = analogSoilRead();
     b72:	0e 94 53 00 	call	0xa6	; 0xa6 <analogSoilRead>
     b76:	8c 01       	movw	r16, r24
		int waterlvl = analogWaterRead();
     b78:	0e 94 6d 00 	call	0xda	; 0xda <analogWaterRead>
     b7c:	ec 01       	movw	r28, r24
		//Print Soil Lvl to screen, next to temp
		Lcd4_Set_Cursor(1,14);
     b7e:	6e e0       	ldi	r22, 0x0E	; 14
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
		Lcd4_Write_String("SL:");
     b8a:	81 e5       	ldi	r24, 0x51	; 81
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
		Lcd4_Set_Cursor(1,16);
     b92:	60 e1       	ldi	r22, 0x10	; 16
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
     b9e:	4a e0       	ldi	r20, 0x0A	; 10
     ba0:	65 e8       	ldi	r22, 0x85	; 133
     ba2:	71 e0       	ldi	r23, 0x01	; 1
     ba4:	c8 01       	movw	r24, r16
     ba6:	0e 94 b2 08 	call	0x1164	; 0x1164 <__itoa_ncheck>
		itoa(soillvl,buffer,10);
		Lcd4_Write_String(buffer);
     baa:	85 e8       	ldi	r24, 0x85	; 133
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>

		//Take ADC val, and convert take just 1's place to get 0 or 1
		if(waterlvl >= 1000)
     bb2:	21 e0       	ldi	r18, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	c8 3e       	cpi	r28, 0xE8	; 232
     bb8:	d3 40       	sbci	r29, 0x03	; 3
     bba:	0c f4       	brge	.+2      	; 0xbbe <checkSoil+0x54>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
		waterlvl = 1;
     bbe:	c2 2f       	mov	r28, r18
     bc0:	d9 2f       	mov	r29, r25
		else
		waterlvl = 0;
		//Check water buoyancy first, then soil
		if(waterlvl == HIGH)
     bc2:	c1 30       	cpi	r28, 0x01	; 1
     bc4:	d1 05       	cpc	r29, r1
     bc6:	71 f4       	brne	.+28     	; 0xbe4 <checkSoil+0x7a>
		{
			// LCD Print Water Level Normal	
			Lcd4_Set_Cursor(4,7);
     bc8:	67 e0       	ldi	r22, 0x07	; 7
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	84 e0       	ldi	r24, 0x04	; 4
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     bd4:	8b e1       	ldi	r24, 0x1B	; 27
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(4,7);
			Lcd4_Write_String("wC"); //Water critical
		
		}
		//Verify buoyancy sensor outputs 1, turn on pump if needed
		if(soillvl<=100 && (waterlvl==1))
     bdc:	05 36       	cpi	r16, 0x65	; 101
     bde:	11 05       	cpc	r17, r1
     be0:	d4 f0       	brlt	.+52     	; 0xc16 <checkSoil+0xac>
     be2:	1a c1       	rjmp	.+564    	; 0xe18 <checkSoil+0x2ae>
		}
		else 
	    {
			// LCD Print Water Level Low
			// Turn Off Water Pump If Running	
			Lcd4_Set_Cursor(4,7);
     be4:	67 e0       	ldi	r22, 0x07	; 7
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
		    Lcd4_Write_String("             ");
     bf0:	8b e1       	ldi	r24, 0x1B	; 27
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(4,7);
     bf8:	67 e0       	ldi	r22, 0x07	; 7
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("wC"); //Water critical
     c04:	85 e5       	ldi	r24, 0x55	; 85
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
			Lcd4_Write_String("             ");
			Lcd4_Set_Cursor(3,7);
			Lcd4_Write_String("pF");
		}
		else if(soillvl<=SOIL_CRIT&&waterlvl)
     c0c:	03 33       	cpi	r16, 0x33	; 51
     c0e:	11 05       	cpc	r17, r1
     c10:	0c f4       	brge	.+2      	; 0xc14 <checkSoil+0xaa>
     c12:	5f c0       	rjmp	.+190    	; 0xcd2 <checkSoil+0x168>
     c14:	dd c0       	rjmp	.+442    	; 0xdd0 <checkSoil+0x266>
		
		}
		//Verify buoyancy sensor outputs 1, turn on pump if needed
		if(soillvl<=100 && (waterlvl==1))
		{
			Lcd4_Set_Cursor(3,0);
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Action:");
     c22:	87 e0       	ldi	r24, 0x07	; 7
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     c2a:	67 e0       	ldi	r22, 0x07	; 7
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     c36:	8b e1       	ldi	r24, 0x1B	; 27
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     c3e:	67 e0       	ldi	r22, 0x07	; 7
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("pO");
     c4a:	88 e5       	ldi	r24, 0x58	; 88
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			turnOnPump();
     c52:	0e 94 c6 01 	call	0x38c	; 0x38c <turnOnPump>
     c56:	9f ef       	ldi	r25, 0xFF	; 255
     c58:	23 ec       	ldi	r18, 0xC3	; 195
     c5a:	89 e0       	ldi	r24, 0x09	; 9
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	20 40       	sbci	r18, 0x00	; 0
     c60:	80 40       	sbci	r24, 0x00	; 0
     c62:	e1 f7       	brne	.-8      	; 0xc5c <checkSoil+0xf2>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <checkSoil+0xfc>
     c66:	00 00       	nop
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	23 ec       	ldi	r18, 0xC3	; 195
     c6c:	89 e0       	ldi	r24, 0x09	; 9
     c6e:	91 50       	subi	r25, 0x01	; 1
     c70:	20 40       	sbci	r18, 0x00	; 0
     c72:	80 40       	sbci	r24, 0x00	; 0
     c74:	e1 f7       	brne	.-8      	; 0xc6e <checkSoil+0x104>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <checkSoil+0x10e>
     c78:	00 00       	nop
     c7a:	9f ef       	ldi	r25, 0xFF	; 255
     c7c:	23 ec       	ldi	r18, 0xC3	; 195
     c7e:	89 e0       	ldi	r24, 0x09	; 9
     c80:	91 50       	subi	r25, 0x01	; 1
     c82:	20 40       	sbci	r18, 0x00	; 0
     c84:	80 40       	sbci	r24, 0x00	; 0
     c86:	e1 f7       	brne	.-8      	; 0xc80 <checkSoil+0x116>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <checkSoil+0x120>
     c8a:	00 00       	nop
			_delay_ms(200);
			_delay_ms(200);
			_delay_ms(200);
			checkSoil();
     c8c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <checkSoil>
			turnOffPump();
     c90:	0e 94 c9 01 	call	0x392	; 0x392 <turnOffPump>
			Lcd4_Set_Cursor(3,0);
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Action:");
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("             ");
     cb4:	8b e1       	ldi	r24, 0x1B	; 27
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Set_Cursor(3,7);
     cbc:	67 e0       	ldi	r22, 0x07	; 7
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
			Lcd4_Write_String("pF");
     cc8:	8b e5       	ldi	r24, 0x5B	; 91
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Write_String("wC"); //Water critical
		
		}
		//Verify buoyancy sensor outputs 1, turn on pump if needed
		if(soillvl<=100 && (waterlvl==1))
		{
     cd0:	a8 c0       	rjmp	.+336    	; 0xe22 <checkSoil+0x2b8>
			Lcd4_Set_Cursor(3,7);
			Lcd4_Write_String("             ");
			Lcd4_Set_Cursor(3,7);
			Lcd4_Write_String("pF");
		}
		else if(soillvl<=SOIL_CRIT&&waterlvl)
     cd2:	cd 2b       	or	r28, r29
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <checkSoil+0x16e>
     cd6:	7c c0       	rjmp	.+248    	; 0xdd0 <checkSoil+0x266>
		{
				Lcd4_Set_Cursor(4,0);
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("Error:");
     ce4:	8f e0       	ldi	r24, 0x0F	; 15
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(4,7);
     cec:	67 e0       	ldi	r22, 0x07	; 7
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("             ");
     cf8:	8b e1       	ldi	r24, 0x1B	; 27
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(4,7);
     d00:	67 e0       	ldi	r22, 0x07	; 7
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("sC");
     d0c:	8e e5       	ldi	r24, 0x5E	; 94
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
		        Lcd4_Set_Cursor(3,0);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("Action:");
     d20:	87 e0       	ldi	r24, 0x07	; 7
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     d28:	67 e0       	ldi	r22, 0x07	; 7
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("             ");
     d34:	8b e1       	ldi	r24, 0x1B	; 27
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     d3c:	67 e0       	ldi	r22, 0x07	; 7
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("pO");
     d48:	88 e5       	ldi	r24, 0x58	; 88
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				turnOnPump();
     d50:	0e 94 c6 01 	call	0x38c	; 0x38c <turnOnPump>
     d54:	9f ef       	ldi	r25, 0xFF	; 255
     d56:	23 ec       	ldi	r18, 0xC3	; 195
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	91 50       	subi	r25, 0x01	; 1
     d5c:	20 40       	sbci	r18, 0x00	; 0
     d5e:	80 40       	sbci	r24, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <checkSoil+0x1f0>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <checkSoil+0x1fa>
     d64:	00 00       	nop
     d66:	9f ef       	ldi	r25, 0xFF	; 255
     d68:	23 ec       	ldi	r18, 0xC3	; 195
     d6a:	89 e0       	ldi	r24, 0x09	; 9
     d6c:	91 50       	subi	r25, 0x01	; 1
     d6e:	20 40       	sbci	r18, 0x00	; 0
     d70:	80 40       	sbci	r24, 0x00	; 0
     d72:	e1 f7       	brne	.-8      	; 0xd6c <checkSoil+0x202>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <checkSoil+0x20c>
     d76:	00 00       	nop
     d78:	9f ef       	ldi	r25, 0xFF	; 255
     d7a:	23 ec       	ldi	r18, 0xC3	; 195
     d7c:	89 e0       	ldi	r24, 0x09	; 9
     d7e:	91 50       	subi	r25, 0x01	; 1
     d80:	20 40       	sbci	r18, 0x00	; 0
     d82:	80 40       	sbci	r24, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <checkSoil+0x214>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <checkSoil+0x21e>
     d88:	00 00       	nop
				_delay_ms(200);
				_delay_ms(200);
				_delay_ms(200);
				checkSoil();		  			
     d8a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <checkSoil>
				turnOffPump();
     d8e:	0e 94 c9 01 	call	0x392	; 0x392 <turnOffPump>
				Lcd4_Set_Cursor(3,0);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("Action:");
     d9e:	87 e0       	ldi	r24, 0x07	; 7
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     da6:	67 e0       	ldi	r22, 0x07	; 7
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("             ");
     db2:	8b e1       	ldi	r24, 0x1B	; 27
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     dba:	67 e0       	ldi	r22, 0x07	; 7
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("pF");	
     dc6:	8b e5       	ldi	r24, 0x5B	; 91
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
			Lcd4_Write_String("             ");
			Lcd4_Set_Cursor(3,7);
			Lcd4_Write_String("pF");
		}
		else if(soillvl<=SOIL_CRIT&&waterlvl)
		{
     dce:	29 c0       	rjmp	.+82     	; 0xe22 <checkSoil+0x2b8>
				Lcd4_Set_Cursor(3,7);
				Lcd4_Write_String("pF");	
		}
	
	
		else if(soillvl<=SOIL_LOW && soillvl<=SOIL_MAX)
     dd0:	05 36       	cpi	r16, 0x65	; 101
     dd2:	11 05       	cpc	r17, r1
     dd4:	34 f5       	brge	.+76     	; 0xe22 <checkSoil+0x2b8>
		{
		        turnOffPump();
     dd6:	0e 94 c9 01 	call	0x392	; 0x392 <turnOffPump>
				Lcd4_Set_Cursor(3,0);
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("Action:");
     de6:	87 e0       	ldi	r24, 0x07	; 7
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     dee:	67 e0       	ldi	r22, 0x07	; 7
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("             ");
     dfa:	8b e1       	ldi	r24, 0x1B	; 27
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
				Lcd4_Set_Cursor(3,7);
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 05 02 	call	0x40a	; 0x40a <Lcd4_Set_Cursor>
				Lcd4_Write_String("pF");			
     e0e:	8b e5       	ldi	r24, 0x5B	; 91
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd4_Write_String>
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <checkSoil+0x2b8>
			Lcd4_Set_Cursor(3,7);
			Lcd4_Write_String("             ");
			Lcd4_Set_Cursor(3,7);
			Lcd4_Write_String("pF");
		}
		else if(soillvl<=SOIL_CRIT&&waterlvl)
     e18:	03 33       	cpi	r16, 0x33	; 51
     e1a:	11 05       	cpc	r17, r1
     e1c:	0c f4       	brge	.+2      	; 0xe20 <checkSoil+0x2b6>
     e1e:	5c cf       	rjmp	.-328    	; 0xcd8 <checkSoil+0x16e>
     e20:	d7 cf       	rjmp	.-82     	; 0xdd0 <checkSoil+0x266>
				Lcd4_Set_Cursor(3,7);
				Lcd4_Write_String("             ");
				Lcd4_Set_Cursor(3,7);
				Lcd4_Write_String("pF");			
		}
}
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	08 95       	ret

00000e2c <main>:
volatile int servo = 0;
volatile int fan = 0;
main()
{
	/*	init system	*/
	initRelay();
     e2c:	0e 94 ae 02 	call	0x55c	; 0x55c <initRelay>
	initMainLCD();
     e30:	0e 94 b1 02 	call	0x562	; 0x562 <initMainLCD>
	initHbridge();
     e34:	0e 94 bc 02 	call	0x578	; 0x578 <initHbridge>
	initServo();
     e38:	0e 94 c0 02 	call	0x580	; 0x580 <initServo>
	initADC();
     e3c:	0e 94 cd 02 	call	0x59a	; 0x59a <initADC>
	/*	pre-run setups */
	custSetup();
     e40:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <custSetup>
	LCDSetup();
     e44:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCDSetup>
	/*	realtime loop	*/
	while(1)
	{
		temp_light();
     e48:	0e 94 40 03 	call	0x680	; 0x680 <temp_light>
		checkSoil();
     e4c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <checkSoil>
	}
     e50:	fb cf       	rjmp	.-10     	; 0xe48 <main+0x1c>

00000e52 <lightOn>:
#include <avr/io.h>
#include "relay.h"
    
void lightOn()
{
	relay_PORT |= (1<<relay_OUTPUTPIN);
     e52:	28 9a       	sbi	0x05, 0	; 5
     e54:	08 95       	ret

00000e56 <lightOff>:
}
		
void lightOff()
{
	relay_PORT &= ~(1<<relay_OUTPUTPIN);
     e56:	28 98       	cbi	0x05, 0	; 5
     e58:	08 95       	ret

00000e5a <Wait>:
}

void NinetyDegree()
{
	OCR1A=374;  //90 degree
	Wait();
     e5a:	22 e3       	ldi	r18, 0x32	; 50
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	fc 01       	movw	r30, r24
     e62:	31 97       	sbiw	r30, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <Wait+0x8>
     e66:	fc 01       	movw	r30, r24
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <Wait+0xe>
     e6c:	fc 01       	movw	r30, r24
     e6e:	31 97       	sbiw	r30, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <Wait+0x14>
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	a9 f7       	brne	.-22     	; 0xe60 <Wait+0x6>
     e76:	08 95       	ret

00000e78 <ZeroDegree>:
     e78:	89 ef       	ldi	r24, 0xF9	; 249
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e80:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e84:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Wait>
     e88:	08 95       	ret

00000e8a <EightyDegree>:
	Wait();
}*/

void EightyDegree()
{
	OCR1A=499;  //180 degree
     e8a:	83 ef       	ldi	r24, 0xF3	; 243
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e92:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	Wait();
     e96:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Wait>
     e9a:	08 95       	ret

00000e9c <__cmpsf2>:
     e9c:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_cmp>
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <__cmpsf2+0x8>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	08 95       	ret

00000ea6 <__divsf3>:
     ea6:	0e 94 67 07 	call	0xece	; 0xece <__divsf3x>
     eaa:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     eae:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     eb2:	58 f0       	brcs	.+22     	; 0xeca <__divsf3+0x24>
     eb4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     eb8:	40 f0       	brcs	.+16     	; 0xeca <__divsf3+0x24>
     eba:	29 f4       	brne	.+10     	; 0xec6 <__divsf3+0x20>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	29 f0       	breq	.+10     	; 0xeca <__divsf3+0x24>
     ec0:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
     ec4:	51 11       	cpse	r21, r1
     ec6:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     eca:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>

00000ece <__divsf3x>:
     ece:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     ed2:	68 f3       	brcs	.-38     	; 0xeae <__divsf3+0x8>

00000ed4 <__divsf3_pse>:
     ed4:	99 23       	and	r25, r25
     ed6:	b1 f3       	breq	.-20     	; 0xec4 <__divsf3+0x1e>
     ed8:	55 23       	and	r21, r21
     eda:	91 f3       	breq	.-28     	; 0xec0 <__divsf3+0x1a>
     edc:	95 1b       	sub	r25, r21
     ede:	55 0b       	sbc	r21, r21
     ee0:	bb 27       	eor	r27, r27
     ee2:	aa 27       	eor	r26, r26
     ee4:	62 17       	cp	r22, r18
     ee6:	73 07       	cpc	r23, r19
     ee8:	84 07       	cpc	r24, r20
     eea:	38 f0       	brcs	.+14     	; 0xefa <__divsf3_pse+0x26>
     eec:	9f 5f       	subi	r25, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	44 1f       	adc	r20, r20
     ef6:	aa 1f       	adc	r26, r26
     ef8:	a9 f3       	breq	.-22     	; 0xee4 <__divsf3_pse+0x10>
     efa:	35 d0       	rcall	.+106    	; 0xf66 <__divsf3_pse+0x92>
     efc:	0e 2e       	mov	r0, r30
     efe:	3a f0       	brmi	.+14     	; 0xf0e <__divsf3_pse+0x3a>
     f00:	e0 e8       	ldi	r30, 0x80	; 128
     f02:	32 d0       	rcall	.+100    	; 0xf68 <__divsf3_pse+0x94>
     f04:	91 50       	subi	r25, 0x01	; 1
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	e6 95       	lsr	r30
     f0a:	00 1c       	adc	r0, r0
     f0c:	ca f7       	brpl	.-14     	; 0xf00 <__divsf3_pse+0x2c>
     f0e:	2b d0       	rcall	.+86     	; 0xf66 <__divsf3_pse+0x92>
     f10:	fe 2f       	mov	r31, r30
     f12:	29 d0       	rcall	.+82     	; 0xf66 <__divsf3_pse+0x92>
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	bb 1f       	adc	r27, r27
     f1c:	26 17       	cp	r18, r22
     f1e:	37 07       	cpc	r19, r23
     f20:	48 07       	cpc	r20, r24
     f22:	ab 07       	cpc	r26, r27
     f24:	b0 e8       	ldi	r27, 0x80	; 128
     f26:	09 f0       	breq	.+2      	; 0xf2a <__divsf3_pse+0x56>
     f28:	bb 0b       	sbc	r27, r27
     f2a:	80 2d       	mov	r24, r0
     f2c:	bf 01       	movw	r22, r30
     f2e:	ff 27       	eor	r31, r31
     f30:	93 58       	subi	r25, 0x83	; 131
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	3a f0       	brmi	.+14     	; 0xf44 <__divsf3_pse+0x70>
     f36:	9e 3f       	cpi	r25, 0xFE	; 254
     f38:	51 05       	cpc	r21, r1
     f3a:	78 f0       	brcs	.+30     	; 0xf5a <__divsf3_pse+0x86>
     f3c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
     f40:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     f44:	5f 3f       	cpi	r21, 0xFF	; 255
     f46:	e4 f3       	brlt	.-8      	; 0xf40 <__divsf3_pse+0x6c>
     f48:	98 3e       	cpi	r25, 0xE8	; 232
     f4a:	d4 f3       	brlt	.-12     	; 0xf40 <__divsf3_pse+0x6c>
     f4c:	86 95       	lsr	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f7 95       	ror	r31
     f56:	9f 5f       	subi	r25, 0xFF	; 255
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__divsf3_pse+0x78>
     f5a:	88 0f       	add	r24, r24
     f5c:	91 1d       	adc	r25, r1
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret
     f66:	e1 e0       	ldi	r30, 0x01	; 1
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	bb 1f       	adc	r27, r27
     f70:	62 17       	cp	r22, r18
     f72:	73 07       	cpc	r23, r19
     f74:	84 07       	cpc	r24, r20
     f76:	ba 07       	cpc	r27, r26
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__divsf3_pse+0xae>
     f7a:	62 1b       	sub	r22, r18
     f7c:	73 0b       	sbc	r23, r19
     f7e:	84 0b       	sbc	r24, r20
     f80:	ba 0b       	sbc	r27, r26
     f82:	ee 1f       	adc	r30, r30
     f84:	88 f7       	brcc	.-30     	; 0xf68 <__divsf3_pse+0x94>
     f86:	e0 95       	com	r30
     f88:	08 95       	ret

00000f8a <__fixsfsi>:
     f8a:	0e 94 cc 07 	call	0xf98	; 0xf98 <__fixunssfsi>
     f8e:	68 94       	set
     f90:	b1 11       	cpse	r27, r1
     f92:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     f96:	08 95       	ret

00000f98 <__fixunssfsi>:
     f98:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_splitA>
     f9c:	88 f0       	brcs	.+34     	; 0xfc0 <__fixunssfsi+0x28>
     f9e:	9f 57       	subi	r25, 0x7F	; 127
     fa0:	98 f0       	brcs	.+38     	; 0xfc8 <__fixunssfsi+0x30>
     fa2:	b9 2f       	mov	r27, r25
     fa4:	99 27       	eor	r25, r25
     fa6:	b7 51       	subi	r27, 0x17	; 23
     fa8:	b0 f0       	brcs	.+44     	; 0xfd6 <__fixunssfsi+0x3e>
     faa:	e1 f0       	breq	.+56     	; 0xfe4 <__fixunssfsi+0x4c>
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	1a f0       	brmi	.+6      	; 0xfbc <__fixunssfsi+0x24>
     fb6:	ba 95       	dec	r27
     fb8:	c9 f7       	brne	.-14     	; 0xfac <__fixunssfsi+0x14>
     fba:	14 c0       	rjmp	.+40     	; 0xfe4 <__fixunssfsi+0x4c>
     fbc:	b1 30       	cpi	r27, 0x01	; 1
     fbe:	91 f0       	breq	.+36     	; 0xfe4 <__fixunssfsi+0x4c>
     fc0:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_zero>
     fc4:	b1 e0       	ldi	r27, 0x01	; 1
     fc6:	08 95       	ret
     fc8:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>
     fcc:	67 2f       	mov	r22, r23
     fce:	78 2f       	mov	r23, r24
     fd0:	88 27       	eor	r24, r24
     fd2:	b8 5f       	subi	r27, 0xF8	; 248
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <__fixunssfsi+0x4c>
     fd6:	b9 3f       	cpi	r27, 0xF9	; 249
     fd8:	cc f3       	brlt	.-14     	; 0xfcc <__fixunssfsi+0x34>
     fda:	86 95       	lsr	r24
     fdc:	77 95       	ror	r23
     fde:	67 95       	ror	r22
     fe0:	b3 95       	inc	r27
     fe2:	d9 f7       	brne	.-10     	; 0xfda <__fixunssfsi+0x42>
     fe4:	3e f4       	brtc	.+14     	; 0xff4 <__fixunssfsi+0x5c>
     fe6:	90 95       	com	r25
     fe8:	80 95       	com	r24
     fea:	70 95       	com	r23
     fec:	61 95       	neg	r22
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	8f 4f       	sbci	r24, 0xFF	; 255
     ff2:	9f 4f       	sbci	r25, 0xFF	; 255
     ff4:	08 95       	ret

00000ff6 <__floatunsisf>:
     ff6:	e8 94       	clt
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <__floatsisf+0x12>

00000ffa <__floatsisf>:
     ffa:	97 fb       	bst	r25, 7
     ffc:	3e f4       	brtc	.+14     	; 0x100c <__floatsisf+0x12>
     ffe:	90 95       	com	r25
    1000:	80 95       	com	r24
    1002:	70 95       	com	r23
    1004:	61 95       	neg	r22
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	99 23       	and	r25, r25
    100e:	a9 f0       	breq	.+42     	; 0x103a <__floatsisf+0x40>
    1010:	f9 2f       	mov	r31, r25
    1012:	96 e9       	ldi	r25, 0x96	; 150
    1014:	bb 27       	eor	r27, r27
    1016:	93 95       	inc	r25
    1018:	f6 95       	lsr	r31
    101a:	87 95       	ror	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	b7 95       	ror	r27
    1022:	f1 11       	cpse	r31, r1
    1024:	f8 cf       	rjmp	.-16     	; 0x1016 <__floatsisf+0x1c>
    1026:	fa f4       	brpl	.+62     	; 0x1066 <__floatsisf+0x6c>
    1028:	bb 0f       	add	r27, r27
    102a:	11 f4       	brne	.+4      	; 0x1030 <__floatsisf+0x36>
    102c:	60 ff       	sbrs	r22, 0
    102e:	1b c0       	rjmp	.+54     	; 0x1066 <__floatsisf+0x6c>
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8f 4f       	sbci	r24, 0xFF	; 255
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	16 c0       	rjmp	.+44     	; 0x1066 <__floatsisf+0x6c>
    103a:	88 23       	and	r24, r24
    103c:	11 f0       	breq	.+4      	; 0x1042 <__floatsisf+0x48>
    103e:	96 e9       	ldi	r25, 0x96	; 150
    1040:	11 c0       	rjmp	.+34     	; 0x1064 <__floatsisf+0x6a>
    1042:	77 23       	and	r23, r23
    1044:	21 f0       	breq	.+8      	; 0x104e <__floatsisf+0x54>
    1046:	9e e8       	ldi	r25, 0x8E	; 142
    1048:	87 2f       	mov	r24, r23
    104a:	76 2f       	mov	r23, r22
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <__floatsisf+0x5e>
    104e:	66 23       	and	r22, r22
    1050:	71 f0       	breq	.+28     	; 0x106e <__floatsisf+0x74>
    1052:	96 e8       	ldi	r25, 0x86	; 134
    1054:	86 2f       	mov	r24, r22
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	2a f0       	brmi	.+10     	; 0x1066 <__floatsisf+0x6c>
    105c:	9a 95       	dec	r25
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	da f7       	brpl	.-10     	; 0x105c <__floatsisf+0x62>
    1066:	88 0f       	add	r24, r24
    1068:	96 95       	lsr	r25
    106a:	87 95       	ror	r24
    106c:	97 f9       	bld	r25, 7
    106e:	08 95       	ret

00001070 <__fp_cmp>:
    1070:	99 0f       	add	r25, r25
    1072:	00 08       	sbc	r0, r0
    1074:	55 0f       	add	r21, r21
    1076:	aa 0b       	sbc	r26, r26
    1078:	e0 e8       	ldi	r30, 0x80	; 128
    107a:	fe ef       	ldi	r31, 0xFE	; 254
    107c:	16 16       	cp	r1, r22
    107e:	17 06       	cpc	r1, r23
    1080:	e8 07       	cpc	r30, r24
    1082:	f9 07       	cpc	r31, r25
    1084:	c0 f0       	brcs	.+48     	; 0x10b6 <__fp_cmp+0x46>
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	e4 07       	cpc	r30, r20
    108c:	f5 07       	cpc	r31, r21
    108e:	98 f0       	brcs	.+38     	; 0x10b6 <__fp_cmp+0x46>
    1090:	62 1b       	sub	r22, r18
    1092:	73 0b       	sbc	r23, r19
    1094:	84 0b       	sbc	r24, r20
    1096:	95 0b       	sbc	r25, r21
    1098:	39 f4       	brne	.+14     	; 0x10a8 <__fp_cmp+0x38>
    109a:	0a 26       	eor	r0, r26
    109c:	61 f0       	breq	.+24     	; 0x10b6 <__fp_cmp+0x46>
    109e:	23 2b       	or	r18, r19
    10a0:	24 2b       	or	r18, r20
    10a2:	25 2b       	or	r18, r21
    10a4:	21 f4       	brne	.+8      	; 0x10ae <__fp_cmp+0x3e>
    10a6:	08 95       	ret
    10a8:	0a 26       	eor	r0, r26
    10aa:	09 f4       	brne	.+2      	; 0x10ae <__fp_cmp+0x3e>
    10ac:	a1 40       	sbci	r26, 0x01	; 1
    10ae:	a6 95       	lsr	r26
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	81 1d       	adc	r24, r1
    10b4:	81 1d       	adc	r24, r1
    10b6:	08 95       	ret

000010b8 <__fp_inf>:
    10b8:	97 f9       	bld	r25, 7
    10ba:	9f 67       	ori	r25, 0x7F	; 127
    10bc:	80 e8       	ldi	r24, 0x80	; 128
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <__fp_nan>:
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	80 ec       	ldi	r24, 0xC0	; 192
    10c8:	08 95       	ret

000010ca <__fp_pscA>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	18 06       	cpc	r1, r24
    10d4:	09 06       	cpc	r0, r25
    10d6:	08 95       	ret

000010d8 <__fp_pscB>:
    10d8:	00 24       	eor	r0, r0
    10da:	0a 94       	dec	r0
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	14 06       	cpc	r1, r20
    10e2:	05 06       	cpc	r0, r21
    10e4:	08 95       	ret

000010e6 <__fp_round>:
    10e6:	09 2e       	mov	r0, r25
    10e8:	03 94       	inc	r0
    10ea:	00 0c       	add	r0, r0
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__fp_round+0xc>
    10ee:	88 23       	and	r24, r24
    10f0:	52 f0       	brmi	.+20     	; 0x1106 <__fp_round+0x20>
    10f2:	bb 0f       	add	r27, r27
    10f4:	40 f4       	brcc	.+16     	; 0x1106 <__fp_round+0x20>
    10f6:	bf 2b       	or	r27, r31
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__fp_round+0x18>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <__fp_round+0x20>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__fp_split3>:
    1108:	57 fd       	sbrc	r21, 7
    110a:	90 58       	subi	r25, 0x80	; 128
    110c:	44 0f       	add	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	59 f0       	breq	.+22     	; 0x1128 <__fp_splitA+0x10>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	71 f0       	breq	.+28     	; 0x1132 <__fp_splitA+0x1a>
    1116:	47 95       	ror	r20

00001118 <__fp_splitA>:
    1118:	88 0f       	add	r24, r24
    111a:	97 fb       	bst	r25, 7
    111c:	99 1f       	adc	r25, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <__fp_splitA+0x20>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	79 f0       	breq	.+30     	; 0x1142 <__fp_splitA+0x2a>
    1124:	87 95       	ror	r24
    1126:	08 95       	ret
    1128:	12 16       	cp	r1, r18
    112a:	13 06       	cpc	r1, r19
    112c:	14 06       	cpc	r1, r20
    112e:	55 1f       	adc	r21, r21
    1130:	f2 cf       	rjmp	.-28     	; 0x1116 <__fp_split3+0xe>
    1132:	46 95       	lsr	r20
    1134:	f1 df       	rcall	.-30     	; 0x1118 <__fp_splitA>
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <__fp_splitA+0x30>
    1138:	16 16       	cp	r1, r22
    113a:	17 06       	cpc	r1, r23
    113c:	18 06       	cpc	r1, r24
    113e:	99 1f       	adc	r25, r25
    1140:	f1 cf       	rjmp	.-30     	; 0x1124 <__fp_splitA+0xc>
    1142:	86 95       	lsr	r24
    1144:	71 05       	cpc	r23, r1
    1146:	61 05       	cpc	r22, r1
    1148:	08 94       	sec
    114a:	08 95       	ret

0000114c <__fp_zero>:
    114c:	e8 94       	clt

0000114e <__fp_szero>:
    114e:	bb 27       	eor	r27, r27
    1150:	66 27       	eor	r22, r22
    1152:	77 27       	eor	r23, r23
    1154:	cb 01       	movw	r24, r22
    1156:	97 f9       	bld	r25, 7
    1158:	08 95       	ret

0000115a <__gesf2>:
    115a:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_cmp>
    115e:	08 f4       	brcc	.+2      	; 0x1162 <__gesf2+0x8>
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__itoa_ncheck>:
    1164:	bb 27       	eor	r27, r27
    1166:	4a 30       	cpi	r20, 0x0A	; 10
    1168:	31 f4       	brne	.+12     	; 0x1176 <__itoa_ncheck+0x12>
    116a:	99 23       	and	r25, r25
    116c:	22 f4       	brpl	.+8      	; 0x1176 <__itoa_ncheck+0x12>
    116e:	bd e2       	ldi	r27, 0x2D	; 45
    1170:	90 95       	com	r25
    1172:	81 95       	neg	r24
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	0c 94 be 08 	jmp	0x117c	; 0x117c <__utoa_common>

0000117a <__utoa_ncheck>:
    117a:	bb 27       	eor	r27, r27

0000117c <__utoa_common>:
    117c:	fb 01       	movw	r30, r22
    117e:	55 27       	eor	r21, r21
    1180:	aa 27       	eor	r26, r26
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	aa 1f       	adc	r26, r26
    1188:	a4 17       	cp	r26, r20
    118a:	10 f0       	brcs	.+4      	; 0x1190 <__utoa_common+0x14>
    118c:	a4 1b       	sub	r26, r20
    118e:	83 95       	inc	r24
    1190:	50 51       	subi	r21, 0x10	; 16
    1192:	b9 f7       	brne	.-18     	; 0x1182 <__utoa_common+0x6>
    1194:	a0 5d       	subi	r26, 0xD0	; 208
    1196:	aa 33       	cpi	r26, 0x3A	; 58
    1198:	08 f0       	brcs	.+2      	; 0x119c <__utoa_common+0x20>
    119a:	a9 5d       	subi	r26, 0xD9	; 217
    119c:	a1 93       	st	Z+, r26
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	79 f7       	brne	.-34     	; 0x1180 <__utoa_common+0x4>
    11a2:	b1 11       	cpse	r27, r1
    11a4:	b1 93       	st	Z+, r27
    11a6:	11 92       	st	Z+, r1
    11a8:	cb 01       	movw	r24, r22
    11aa:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <strrev>

000011ae <strrev>:
    11ae:	dc 01       	movw	r26, r24
    11b0:	fc 01       	movw	r30, r24
    11b2:	67 2f       	mov	r22, r23
    11b4:	71 91       	ld	r23, Z+
    11b6:	77 23       	and	r23, r23
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <strrev+0x4>
    11ba:	32 97       	sbiw	r30, 0x02	; 2
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <strrev+0x18>
    11be:	7c 91       	ld	r23, X
    11c0:	6d 93       	st	X+, r22
    11c2:	70 83       	st	Z, r23
    11c4:	62 91       	ld	r22, -Z
    11c6:	ae 17       	cp	r26, r30
    11c8:	bf 07       	cpc	r27, r31
    11ca:	c8 f3       	brcs	.-14     	; 0x11be <strrev+0x10>
    11cc:	08 95       	ret

000011ce <_exit>:
    11ce:	f8 94       	cli

000011d0 <__stop_program>:
    11d0:	ff cf       	rjmp	.-2      	; 0x11d0 <__stop_program>
